[General]
network = AeroComm

# cpu-time-limit = 60s
sim-time-limit = 150000s
repeat = 10

**.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
**.visualizer.*.mobilityVisualizer.displayPositions = true
**.visualizer.*.mobilityVisualizer.displayOrientations = false
**.visualizer.*.mobilityVisualizer.displayVelocities = true
**.visualizer.*.mobilityVisualizer.displayMovementTrails = false
**.visualizer.*.mobilityVisualizer.animationSpeed = 1

*.ac[*].mobility.typename = "LinearMobility"

*.*bs[*].mobility.typename = "StaticGridMobility"
*.*bs[*].mobility.numHosts = 4

*.*bs[*].mobility.columns = 2
*.*bs[*].mobility.rows = 2

# FACTORS
**.N_BS = 4
**.N_AC = 1
**.M = 1
**.T = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1        # default --> Uniform distribution
**.pktGenerator.t = 1s
**.pktGenerator.kMin = 0s
**.pktGenerator.kMax = 1s

**.pktHandler.dRandom = true
# d Interval --> [0, sqrt((x_max)^2 + (y_max)^2)]
# x_max = M	y_max = ceil(N_BS/2) * M
**.pktHandler.dMin = 0

# RNGs
num-rngs = 2
seed-set = ${repetition}
**.packetGenerator.rng-0 = 0
**.packetHandler.rng-1 = 1


[Config k_exp_distibution]

**.pktGenerator.kDistribution = 2	# Exponential distribution
**.pktGenerator.kMean = 1s


##############################
## 	  Validation configs 	##
##############################

################
#### DEBUG #####
################
[Config DeterministicDebug]
repeat = 1

**.pktGenerator.kRandom = false
**.pktGenerator.k = 1s
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

################
## DEGENERACY ##
################

############ Test 1 ---> 1 AC, 1 BS, distance of AC Deterministic, k deterministic ############
[Config DeterministicDegeneracy]
repeat = 1

**.N_BS = 1
**.N_AC = 1

**.pktGenerator.kRandom = false
**.pktGenerator.k = 1s
## **.pktGenerator.kDistribution = 1

**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 0

############ Test 2: 1 AC, 1 BS, distance of AC Deterministic, k uniform ############
[Config kUniformDegeneracy]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1	# Uniform distribution

**.pktGenerator.kMin = 0s
**.pktGenerator.kMax = 1s
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 0

############ Test 3: 1 AC, 1 BS, position of AC Deterministic, k exponential ############
[Config kExponentialDegeneracy]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2	# Exponential distribution
**.pktGenerator.kMean = 0.5s
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 0

#################
## CONSISTENCY ##
#################

############ Test 0 - Case A: 1 AC, 1 BS, distance of AC Deterministic, k deterministic ############
[Config CaseA_kDeterministicConsistency]
repeat = 1
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = false
**.pktGenerator.k = 1s
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

############ Test 0 - Case B: 2 AC, 1 BS, distance of AC Deterministic (s_ac doubled), k deterministic (doubled) ############
[Config CaseB_kDeterministicConsistency]
repeat = 1
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 2
**.pktGenerator.kRandom = false

**.pktGenerator.k = 2s
**.pktGenerator.t = 2s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1.4142135


############ Test 1 - Case A: 1 AC, 1 BS, distance of AC Deterministic, k uniform ############
[Config CaseA_kUniformConsistency]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1	# Uniform distribution

**.pktGenerator.kMin = 0s
**.pktGenerator.kMax = 2s
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

############ Test 1 - Case B: 2 AC, 1 BS, distance of AC Deterministic (s_ac doubled), k uniform (doubled) ############
[Config CaseB_kUniformConsistency]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 2
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1	# Uniform distribution

**.pktGenerator.kMin = 0s
**.pktGenerator.kMax = 4s
**.pktGenerator.t = 2s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1.4142135

############ Test 2 - Case A: 1 AC, 1 BS, distance of AC Deterministic, k exponential ############
[Config CaseA_kExponentialConsistency]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2	# Exponential distribution

**.pktGenerator.kMean = 1s
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

############ Test 2 - Case B: 2 AC, 1 BS, distance of AC Deterministic, k exponential (doubled) ############
[Config CaseB_kExponentialConsistency]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 2
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2	# Exponential distribution

**.pktGenerator.kMean = 2s
**.pktGenerator.t = 2s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1.4142135

#################
## CONTINUITY ###
#################

############ k EXPONENTIAL --> kMean = 0.5 , 1 , 2 ############
[Config kExponentialContinuity]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2	# Exponential distribution

**.pktGenerator.kMean = ${0.5s, 1s, 2s}
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

############ k UNIFORM --> kMin = 0 kMax = 1, 2, 4 ############
[Config kUniformContinuity]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1	# Uniform distribution

**.pktGenerator.kMin = 0s
**.pktGenerator.kMax = ${1s, 2s, 4s}
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1


##################
## MONOTONICITY ##
##################

############ k EXPONENTIAL ############
[Config kExponentialMonotonicity]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2	# Exponential distribution

**.pktGenerator.kMean = ${1s, 1.2s, 1.4s, 1.6s, 1.8s, 2s, 2.2s, 2.4s}
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

############ k UNIFORM ############
[Config kUniformMonotonicity]
repeat = 10
seed-set = ${repetition}

**.N_BS = 1
**.N_AC = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1	# Uniform distribution

**.pktGenerator.kMin = 0s
**.pktGenerator.kMax = ${2s, 2.4s, 2.8s, 3.2s, 3.6s, 4s, 4.4s, 4.8s}
**.pktGenerator.t = 1s
**.pktHandler.dRandom = false
**.pktHandler.distance_AC = 1

##############################################
## Validation against the theoretical model ##
##############################################


##############################
## 		WARMUP Calibration 	##
##############################


############################################
####		SIMTIME CALIBRATION			####
############################################


############################################
## 				EXPERIMENTS				  ##
############################################

## SCENARIO SIMPLE FACTOR ##
[Config kExponentialSimpleFactorsAnalisys]
repeat = 1
seed-set = ${repetition}

**.N_AC = 1
**.N_BS = 4
**.M = ${2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
**.T = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2        # Exponential distribution
**.pktGenerator.t = 360s
**.pktGenerator.kMean = 360s

**.pktHandler.dRandom = true
# d Interval --> [0, sqrt((x_max)^2 + (y_max)^2)]
# x_max = M		y_max = ceil(N_BS/2) * M
**.pktHandler.dMin = 0


[Config kUniformSimpleFactorsAnalisys]
repeat = 1
seed-set = ${repetition}

**.N_AC = 1
**.N_BS = 4
**.M = ${10, 50}
**.T = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1        # Uniform distribution
**.pktGenerator.t = ${360s, 1080s}
**.pktGenerator.kMin = ${0s, 720s}
**.pktGenerator.kMax = ${720s, 1440s}

**.pktHandler.dRandom = true
# d Interval --> [0, sqrt((x_max)^2 + (y_max)^2)]
# x_max = M		y_max = ceil(N_BS/2) * M
**.pktHandler.dMin = 0


## SCENARIO 2^k*r UNIFORM ##
[Config kUniformFactorialAnalysis]
repeat = 10
seed-set = ${repetition}

**.N_AC = ${2, 10}
**.N_BS = ${4, 12}
**.M = ${10, 50}
**.T = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 1        # Uniform distribution
**.pktGenerator.t = ${10s, 20s}
**.pktGenerator.kMin = ${0s, 10s}
**.pktGenerator.kMax = ${10s, 20s}

**.pktHandler.dRandom = true
# d Interval --> [0, sqrt((x_max)^2 + (y_max)^2)]
# x_max = M		y_max = ceil(N_BS/2) * M
**.pktHandler.dMin = 0


## SCENARIO 2^k*r EXPONENTIAL ##
[Config kExponentialFactorialAnalysis]
**.N_AC = 1
**.N_BS = ${4, 12}
**.M = ${10, 50}
**.T = 1
**.pktGenerator.kRandom = true
**.pktGenerator.kDistribution = 2        # Exponential distribution
**.pktGenerator.t = ${10s, 20s}
**.pktGenerator.kMean = ${5s, 15s}

**.pktHandler.dRandom = true
# d Interval --> [0, sqrt((x_max)^2 + (y_max)^2)]
# x_max = M		y_max = ceil(N_BS/2) * M
**.pktHandler.dMin = 0

